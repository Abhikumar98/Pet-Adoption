{"version":3,"sources":["useDropdown.js","Pet.js","Results.js","SearchParams.js","Carousel.js","Details.js","App.js","serviceWorker.js","index.js"],"names":["useDropdown","label","defaultState","options","useState","state","setState","id","replace","toLowerCase","console","log","htmlFor","value","onChange","e","target","onBlur","disabled","length","map","item","key","Pets","animal","name","breed","media","location","image","small","href","className","src","alt","Results","props","pets","pet","Pet","type","breeds","primary","photos","contact","address","city","SearchParams","setLocation","setBreeds","ANIMALS","AnimalDropdown","BreedDropdown","setBreed","setpets","a","animals","useEffect","then","breedStrings","onSubmit","preventDefault","requestPets","placeholder","Carousel","active","handleIndexClick","event","dataset","index","this","photo","onClick","data-index","large","Component","Details","loading","description","error","App","StrictMode","to","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06350f89.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst useDropdown = (label, defaultState, options) => {\n    const [state, setState] = useState(defaultState);\n    const id = `use-dropdown-${label.replace(' ','').toLowerCase()}`;\n    console.log(\"label        =====> \",label);\n    console.log(\"defaultState =====> \", defaultState);\n    console.log(\"options      =====> \", options);\n    \n    const Dropdown = () => (\n        <label htmlFor={id}>\n            {label}\n            <select\n                id={id}\n                value={state}\n                onChange={e => setState(e.target.value)}\n                onBlur={e => setState(e.target.value)}\n                disabled={options.length === 0}\n            >\n                <option value='All'>All</option>\n                {\n                    options.map( item => (\n                        <option value={item} key={item}>{item}</option>\n                    ))\n                }\n            </select>\n        </label>\n    )\n\n    return [state, Dropdown, setState];\n}\n\nexport default useDropdown;","import React from 'react'\n\nconst Pets = ({ animal, name, breed, media, id, location}) => {\n    let image =  'http://placecorgi.com/300/300';\n    if (media.length){\n        image = media[0].small;\n    }\n    return(\n        <a href={`/details/${id}`} className='pet'>\n            <div className='image-container'>\n                <img src={image} alt={name} />\n            </div> \n            <div className='info'>\n                <h1>{name}</h1>\n                <h2>{`${animal} - ${breed} - ${location}`}</h2>\n            </div>\n        </a>\n    )\n}\n\nexport default Pets;","import React from 'react'\nimport Pet from './Pet';\n\nconst Results = (props) => {\n    console.log(props.pets);\n    \n    return (\n        <div className='search'>\n            {props.pets.length === 0 ?\n            <h1>No pets Found</h1> : props.pets.map(pet => (\n                <Pet animal={pet.type} \n                     key={pet.id} \n                     name={pet.name}\n                     breed={pet.breeds.primary}\n                     media={pet.photos}\n                     location={`${pet.contact.address.city}`}\n                     id={pet.id} />)\n            ) \n        }\n        </div>\n    )\n}\n\nexport default Results;","import React, { useState, useEffect } from 'react';\nimport './style.css';\nimport pet, { ANIMALS } from '@frontendmasters/pet';\nimport useDropdown from './useDropdown';\nimport Results from './Results';\n\n\nconst SearchParams = () => {\n  const [location, setLocation] = useState('Seattle, WA');\n  const [breeds, setBreeds] = useState([]);\n  const [animal, AnimalDropdown] = useDropdown('Animals', 'dog', ANIMALS);\n  const [breed, BreedDropdown, setBreed] = useDropdown('Breeds', '', breeds);\n  const [pets, setpets] = useState([]);\n\n  async function requestPets(){\n    const { animals } = await pet.animals({\n      location,\n      breed,\n      type: animal\n    })\n\n    setpets(animals || []);\n  }\n  \n  useEffect(()=>{\n    setBreeds([]);\n    setBreed('');\n\n    pet.breeds(animal).then(({ breeds: breedAPI }) => {\n      const breedStrings = breedAPI.map(({ name }) => name);\n      setBreeds(breedStrings);\n    })\n  }, [animal])\n\n  return (\n    <div className='search-params' >\n      <form onSubmit={(e)=>{\n        e.preventDefault();\n        requestPets();\n      }}>\n        <label htmlFor='location'>\n          <input type='text' \n                 value={location} \n                 onChange={(e) => setLocation(e.target.value)} \n                 placeholder='Location please' />\n        </label>\n        <AnimalDropdown />\n        <BreedDropdown />\n        <button type='submit'>Submit</button>\n      </form>\n      <Results pets={pets} />\n    </div>\n  );\n}\n\nexport default SearchParams;","import React, { Component } from 'react'\n\nexport default class Carousel extends Component {\n    state = {\n        photos: [],\n        active: 0\n    };\n    \n    static getDerivedStateFromProps({ media }){\n        let photos = ['http://placecorgi.com/600/600'];\n        if (media.length){\n            photos = media.map(({ large }) => large);\n        }\n\n        return { photos };\n    }\n\n    handleIndexClick = (event) => {\n        this.setState({\n            active: +event.target.dataset.index \n        })\n    }\n\n    render() {\n        const { photos, active} = this.state;\n        return (\n            <div className='carousel'>\n                <img src={photos[active]} alt='animal' />\n                <div className='carousel-smaller'>\n                    {photos.map((photo, index) => \n                        <img    key={photo}\n                                onClick={this.handleIndexClick}\n                                data-index = {index}\n                                src={photo}\n                                className={index === active ? 'active' : ''}\n                                alt='animal thumbnail' />\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport pet from '@frontendmasters/pet';\nimport Carousel from './Carousel';\n\nexport default class Details extends Component {\n    state = {\n            loading: true\n        }\n    \n    componentDidMount(){\n        pet.animal(this.props.id).then(({ animal }) => {\n            this.setState({\n                name: animal.name,\n                animal: animal.type,\n                location: `${animal.contact.address.city}, \n                           ${animal.contact.address.city}`,\n                description: animal.description,\n                media: animal.photos,\n                breed: animal.breeds.primary,\n                loading: false\n            });\n        }, console.error);\n    }\n    render() {\n        if(this.state.loading){\n            return( <h1>Loading...</h1>)\n        }\n        const { animal, breed, location, description, name, media } = this.state;\n        return (\n            <div className='details'>\n                <Carousel media={media} />\n                <div>\n                    <h1>{name}</h1>\n                    <h2>{`${animal} - ${breed} - ${location}`}</h2>\n                    <button>Adopt {name}</button>\n                    <p>{description}</p>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport SearchParams from './SearchParams';\nimport Details from './Details';\nimport { Router, Link } from '@reach/router';\n\nconst App = () => {\n    return(\n        <React.StrictMode>\n            <div>\n                <header>\n                    <Link to='/'>Adopt me!</Link>\n                </header>\n                <Router>\n                    <SearchParams path='/' />\n                    <Details path='/details/:id'/>\n                </Router>\n            </div>\n        </React.StrictMode>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}